generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// next auth

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  posts         Post[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// flo
model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  authorId  String?
  author    User?   @relation(fields: [authorId], references: [id])
}

// la baraka
model Room {
  id               Int           @id @default(autoincrement())
  title            String        @db.VarChar(255)
  description      String        @db.Text
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  price            Float
  assignedRoom     Image[]
  reservationDates Reservation[]
}

model UserRoom {
  id               Int           @id @default(autoincrement())
  firstName        String?
  name             String?
  email            String?       @unique
  phone            String
  emailVerified    DateTime?
  reservationDates Reservation[]

  @@index([id])
}

model Reservation {
  id                   Int      @id @default(autoincrement())
  checkIn              DateTime @db.Date
  checkOut             DateTime @db.Date
  status               Status   @default(VACANT)
  assignedToRoomId     Int
  assignedToUserRoomId Int
  assignedToRoom       Room     @relation(fields: [assignedToRoomId], references: [id])
  assignedToUserRoom   UserRoom @relation(fields: [assignedToUserRoomId], references: [id])
  // Room                 Room?    @relation(fields: [roomId], references: [id])
  // roomId               Int?

  @@unique([assignedToRoomId, assignedToUserRoomId])
  @@index([assignedToUserRoomId])
}

enum Status {
  OCCUPIED
  VACANT
  IN_PROGRESS
}

model Image {
  id               Int     @id @default(autoincrement())
  publicId         String  @db.VarChar(255)
  alt              String  @db.VarChar(255)
  cover            Boolean @default(false)
  assignedToRoomId Int
  assignedToRoom   Room    @relation(fields: [assignedToRoomId], references: [id])
  assignedToMenuId Int?
  assignedToMenu   Menu?   @relation(fields: [assignedToMenuId], references: [id])

  @@index([assignedToRoomId])
}

model Menu {
  id           Int      @id @default(autoincrement())
  title        String   @db.VarChar(255)
  price        Float
  description  String   @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  assignedMenu Image[]
}
